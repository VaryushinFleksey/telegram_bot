import os
import random
import telebot
from dotenv import load_dotenv
from nicknames import NICKNAMES, add_nickname
from daily_data import DailyData
import stats
import html
from bot_log import logger
from keep_alive import start_keep_alive

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", '7842827025:AAHUEEI-v__l6X2HgHAawmNMeKtCcUxNxus')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')
daily_data = DailyData()

def get_user_mention(user):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user.first_name
    if user.username:
        name = f"@{user.username}"
    return f'<a href="tg://user?id={user.id}">{name}</a>'

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.set_my_commands([
    telebot.types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    telebot.types.BotCommand("nickname", "–í—ã–±—Ä–∞—Ç—å –ø–æ–≥–æ–Ω—è–ª–æ –¥–Ω—è"),
    telebot.types.BotCommand("assign", "–ü—Ä–∏—Å–≤–æ–∏—Ç—å –ø–æ–≥–æ–Ω—è–ª–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"),
    telebot.types.BotCommand("add_nickname", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ –≤ —Å–ø–∏—Å–æ–∫"),
    telebot.types.BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–≥–æ–Ω—è–ª"),
    telebot.types.BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–Ω—è–ª"),
    telebot.types.BotCommand("mystats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–Ω—è–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
])

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–≥–æ–Ω—è–ª–∞ –¥–Ω—è.\n"
        "üé≠ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/nickname - –≤—ã–±—Ä–∞—Ç—å –ø–æ–≥–æ–Ω—è–ª–æ –¥–Ω—è\n"
        "/assign - –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø–æ–≥–æ–Ω—è–ª–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/add_nickname - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ –≤ —Å–ø–∏—Å–æ–∫\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–≥–æ–Ω—è–ª–∞\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–Ω—è–ª\n"
        "/mystats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–Ω—è–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

@bot.message_handler(commands=['list'])
def list_nicknames(message):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏
        numbered_list = [f"{i+1}. {nickname}" for i, nickname in enumerate(NICKNAMES)]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 –ø–æ–≥–æ–Ω—è–ª
        chunks = [numbered_list[i:i+20] for i in range(0, len(numbered_list), 20)]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        header = f"üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–≥–æ–Ω—è–ª ({len(NICKNAMES)} —à—Ç.):\n\n"
        bot.send_message(message.chat.id, header + "\n".join(chunks[0]))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
        for chunk in chunks[1:]:
            bot.send_message(message.chat.id, "\n".join(chunk))
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")

@bot.message_handler(commands=['nickname'])
def choose_nickname(message):
    chat_id = str(message.chat.id)
    chat = message.chat
    chat_name = chat.title if chat.type != 'private' else f"–ß–∞—Ç —Å {chat.first_name}"
    chat_type = chat.type
    
    if daily_data.need_new_nickname(chat_id):
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ
        new_nickname = daily_data.get_random_nickname()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
        data = daily_data.set_nickname(chat_id, new_nickname, chat_name, chat_type)
        
        bot.reply_to(message, 
            f"üé≠ –ü–æ–≥–æ–Ω—è–ª–æ –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è: <b>{new_nickname}</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /assign —á—Ç–æ–±—ã –ø—Ä–∏—Å–≤–æ–∏—Ç—å –µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É!",
            parse_mode='HTML'
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–≥–æ–Ω—è–ª–æ
        data = daily_data.get_current_nickname(chat_id)
        nickname = data['nickname']
        assigned_to = data['assigned_to']
        
        response = f"üé≠ –ü–æ–≥–æ–Ω—è–ª–æ –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è: <b>{nickname}</b>\n"
        if assigned_to:
            response += f"–ü–æ–≥–æ–Ω—è–ª–æ –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è —É {assigned_to}"
        else:
            response += "–ï—â–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /assign"
        
        bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['assign'])
def assign_nickname_handler(message):
    chat_id = str(message.chat.id)
    data = daily_data.get_current_nickname(chat_id)
    
    if not data['nickname']:
        bot.reply_to(message, 
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–≥–æ–Ω—è–ª–æ –¥–Ω—è!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nickname"
        )
        return

    if data['assigned_to']:
        bot.reply_to(message,
            f"üé≠ –ü–æ–≥–æ–Ω—è–ª–æ <b>{data['nickname']}</b> —Å–µ–≥–æ–¥–Ω—è —É {data['assigned_to']}",
            parse_mode='HTML'
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    try:
        chat_members = bot.get_chat_administrators(message.chat.id)
        # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
        real_members = [member.user for member in chat_members if not member.user.is_bot]
        
        if not real_members:
            bot.reply_to(message, "‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        lucky_member = random.choice(real_members)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mention = get_user_mention(lucky_member)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–æ–º—É –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –ø–æ–≥–æ–Ω—è–ª–æ
        data = daily_data.assign_nickname(chat_id, user_mention)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.update_stats(data['nickname'], user_mention)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        bot.reply_to(message,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–≥–æ–Ω—è–ª–æ <b>{data['nickname']}</b> —Å–µ–≥–æ–¥–Ω—è —É {user_mention}",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"Error in assign_nickname_handler: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        bot.reply_to(message, 
            "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã!"
        )

@bot.message_handler(commands=['add_nickname'])
def add_new_nickname(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        nickname = message.text.split('/add_nickname ', 1)[1].strip()
        if not nickname:
            raise IndexError
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ
        if add_nickname(nickname):
            bot.reply_to(message, f"‚úÖ –ü–æ–≥–æ–Ω—è–ª–æ <b>{nickname}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!", parse_mode='HTML')
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≥–æ–Ω—è–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except IndexError:
        bot.reply_to(message, 
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–≥–æ–Ω—è–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!\n"
            "–ü—Ä–∏–º–µ—Ä: `/add_nickname –í–ª–∞—Å—Ç–µ–ª–∏–Ω –ü–∏—Ü—Ü—ã`",
            parse_mode='HTML'
        )
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–Ω—è–ª"""
    top_nicknames = stats.get_top_nicknames()
    top_users = stats.get_top_users()
    recent = stats.get_recent_history()
    
    response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–Ω—è–ª:</b>\n\n"
    
    # –¢–æ–ø –ø–æ–≥–æ–Ω—è–ª
    response += "üèÜ <b>–¢–æ–ø-5 –ø–æ–≥–æ–Ω—è–ª:</b>\n"
    for i, (nickname, count) in enumerate(top_nicknames, 1):
        response += f"{i}. {html.escape(nickname)} - {count} —Ä–∞–∑(–∞)\n"
    
    response += "\nüë• <b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for i, (user, count) in enumerate(top_users, 1):
        response += f"{i}. {user} - {count} –ø–æ–≥–æ–Ω—è–ª(–æ)\n"
    
    response += "\nüìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
    for entry in reversed(recent[:5]):
        date = entry['date'].split('T')[0]
        if entry['assigned_to']:
            response += f"‚Ä¢ {html.escape(entry['nickname'])} ‚Üí {entry['assigned_to']} ({date})\n"
        else:
            response += f"‚Ä¢ {html.escape(entry['nickname'])} ({date})\n"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['mystats'])
def show_user_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≥–æ–Ω—è–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_mention = f'<a href="tg://user?id={message.from_user.id}">{html.escape(message.from_user.first_name)}</a>'
    history = stats.get_user_history(user_mention)
    
    if not history:
        bot.reply_to(message, f"–£ {user_mention} –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–≥–æ–Ω—è–ª üò¢")
        return
    
    response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_mention}:</b>\n\n"
    response += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–≥–æ–Ω—è–ª:\n"
    
    for entry in reversed(history[-5:]):
        date = entry['date'].split('T')[0]
        response += f"‚Ä¢ {html.escape(entry['nickname'])} ({date})\n"
    
    total = len(history)
    response += f"\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–≥–æ–Ω—è–ª: {total}"
    
    bot.reply_to(message, response)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def update_daily_nickname():
    nickname = daily_data.get_random_nickname()
    daily_data.update_daily_nickname(nickname)
    stats.update_stats(nickname)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return nickname

def assign_nickname_to_user(message):
    chat_id = message.chat.id
    nickname = daily_data.get_random_nickname()
    
    if message.reply_to_message:
        user = message.reply_to_message.from_user
        user_mention = f'<a href="tg://user?id={user.id}">{html.escape(user.first_name)}</a>'
    else:
        members = [member for member in bot.get_chat_administrators(chat_id) 
                  if not member.user.is_bot]
        if not members:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ üò¢")
            return
        member = random.choice(members)
        user_mention = f'<a href="tg://user?id={member.user.id}">{html.escape(member.user.first_name)}</a>'
    
    stats.update_stats(nickname, user_mention)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    bot.reply_to(message, f"üéØ {user_mention} –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–Ω—è–ª–æ: <b>{html.escape(nickname)}</b>")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    start_keep_alive()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 